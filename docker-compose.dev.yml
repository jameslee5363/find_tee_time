version: '3.8'

# Development Docker Compose Configuration
# This file includes hot-reload and development tools
# Usage: docker-compose -f docker-compose.dev.yml up

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    ports:
      - "5433:5432"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-airflow}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Kafka Broker (KRaft mode)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-dev
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,PLAINTEXT_EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-dev-data:/var/lib/kafka/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka UI for development monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-dev
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: true
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - dev-network

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - dev-network

  # Airflow Init - Initialize database and create admin user
  airflow-init:
    image: apache/airflow:2.8.0
    container_name: airflow-init-dev
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin || true
        echo "Airflow initialized successfully"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network
    user: "${AIRFLOW_UID:-50000}:0"
    restart: "no"

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: airflow-webserver-dev
    command: webserver
    ports:
      - "8081:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: kafka-python
      # DAG database connection (for tee times data)
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app
    volumes:
      - ./backend/dags:/opt/airflow/dags
      - ./backend/logs:/opt/airflow/logs
      - ./backend/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dev-network
    user: "${AIRFLOW_UID:-50000}:0"

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: airflow-scheduler-dev
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: kafka-python
      # DAG database connection (for tee times data)
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app
    volumes:
      - ./backend/dags:/opt/airflow/dags
      - ./backend/logs:/opt/airflow/logs
      - ./backend/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dev-network
    user: "${AIRFLOW_UID:-50000}:0"

  # FastAPI Backend with hot-reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.fastapi
    container_name: fastapi-backend-dev
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PRODUCTION_FRONTEND_URL: ${PRODUCTION_FRONTEND_URL:-}
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: 1
    volumes:
      # Mount source code for hot-reload
      - ./backend/src:/app/src
      - ./backend/requirements.txt:/app/requirements.txt
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - dev-network
    # Hot-reload is enabled in Dockerfile.fastapi
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  # Tee Time Notifier Service
  tee-time-notifier:
    build:
      context: ./backend
      dockerfile: Dockerfile.notifier
    container_name: tee-time-notifier-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app
      FASTAPI_DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      NOTIFIER_MODE: ${NOTIFIER_MODE:-both}
      MATCHER_CHECK_INTERVAL: ${MATCHER_CHECK_INTERVAL:-300}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: 1
    volumes:
      # Mount source code for easier debugging
      - ./backend/src:/app/src
      - ./backend/kafka:/app/kafka
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - dev-network

  # React Frontend with development server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: react-frontend-dev
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
      CHOKIDAR_USEPOLLING: true
    volumes:
      # Mount source code for hot-reload
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - dev-network

volumes:
  postgres-dev-data:
  kafka-dev-data:

networks:
  dev-network:
    driver: bridge
    name: tee-time-dev
