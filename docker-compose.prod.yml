version: '3.8'

# Production Docker Compose Configuration
# This file orchestrates all services for production deployment
# Usage: docker-compose -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-airflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  # Kafka Broker (KRaft mode)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-prod
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft settings
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093

      # Listeners
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,PLAINTEXT_EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # KRaft cluster ID
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

      # Production settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: airflow-webserver-prod
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8081}:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: kafka-python
    volumes:
      - ./backend/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./backend/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "${AIRFLOW_UID:-50000}:0"

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: airflow-scheduler-prod
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
      _PIP_ADDITIONAL_REQUIREMENTS: kafka-python
    volumes:
      - ./backend/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./backend/plugins:/opt/airflow/plugins
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "${AIRFLOW_UID:-50000}:0"

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.fastapi.prod
    container_name: fastapi-backend-prod
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      PRODUCTION_FRONTEND_URL: ${PRODUCTION_FRONTEND_URL}

      # Python
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
      - frontend-network
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Tee Time Notifier Service
  tee-time-notifier:
    build:
      context: ./backend
      dockerfile: Dockerfile.notifier
    container_name: tee-time-notifier-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/airflow
      FASTAPI_DATABASE_URL: postgresql://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/app

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Notifier settings
      NOTIFIER_MODE: ${NOTIFIER_MODE:-both}
      MATCHER_CHECK_INTERVAL: ${MATCHER_CHECK_INTERVAL:-300}

      # Email configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}

      # Python
      PYTHONPATH: /app/src
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: react-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# Volumes for data persistence
volumes:
  postgres-data:
    driver: local
  kafka-data:
    driver: local
  airflow-logs:
    driver: local

# Network configuration
networks:
  backend-network:
    driver: bridge
    name: tee-time-backend-prod
  frontend-network:
    driver: bridge
    name: tee-time-frontend-prod
